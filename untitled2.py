# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uTySxykLenR53BVHu6WE5FOojD0xMZrd
"""



from sqlalchemy.sql.schema import ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, String, DateTime, Integer, create_engine, Date
from sqlalchemy.orm import relationship
from datetime import datetime, timedelta,date
import os
import psycopg2
conn = psycopg2.connect(
   database= "postgres", user='postgres', password='postgres', host='127.0.0.1', port= '5432'
)
curr = conn.cursor()

#BASE_DIR = os.path.dirname(os.path.realpath("Untitled2"))#file)))
Base = declarative_base()
#engine = create_engine()

connection_string = ""


class User(Base):
  __tablename__ = "Users"
  user_id = Column(Integer(), primary_key = True)
  username = Column(String(20), nullable = False, unique = True)
  
  def __rep__(self):
    return f"<User username = {self.username}"
  def get_tablename_(self):
    return self.__tablename__
  def get_user_id(self):
    return self.user_id
  def get_username(self):
    return self.username
  def add_user(self):
    qry = """ INSERT INTO Users(user_id, username)VALUES
    ('{id}', '{username}')
   """
    new_qry = qry.format(id = self.user_id, username = self.username)
    curr.execute(new_qry)
  
class Account(Base):
  __tablename__ = "Accounts"
  account_id = Column(Integer(), primary_key = True)
  user_id = Column(Integer, ForeignKey('User.user_id'))
  balance = 0
  
  def get_tablename_(self):
    return self.__tablename__
  def get_account_id(self):
    return self.account_id
  def get_userid(self):
    return self.user_id
  def get_balance(self):
    return self.balance

class Transaction(Base):
  
  __tablename__ = "Transactions"
  transaction_id = Column(Integer(), primary_key = True)
  account_id = Column(Integer, ForeignKey('Accounts.account_id'), nullable = False)
  ammount = Column(Integer(), nullable = False)
  created_at = Column(DateTime(),nullable = False, default = datetime.utcnow)
  status= "PENDING"

  def get_tablename_(self):
    return self.__tablename__
  def get_account_id(self):
    return self.account_id
  def get_transaction_id(self):
    return self.transaction_id
  def get_amount(self):
    return self.ammount
  def get_status(self):
    return self.status
  def get_created_at(self):
    return self.created_at
  
  def update_status(self, new_status):
    if (((new_status == 'DECLINED') or (new_status == 'ACCEPTED')) and (self.status == 'PENDING')):
      qry1 ="""UPDATE Transactions 
      SET status = '{sts}'
      WHERE transaction_id = '{id}' """
      new_qry1 = qry1.format(sts = new_status, id = self.transaction_id)
      curr.execute(qry1)
      conn.commit()

      if ((new_status == 'DECLINED') and (self.status != 'DECLINED')):
        self.status = 'DECLINED'
      if (new_status == 'ACCEPTED'and (self.status != 'ACCEPTED')):
        self.status = 'ACCEPTED'

        qry2 = """SELECT Accounts.balance from Accounts
            JOIN Transactions on Accounts.account_id = Transactions.account_id 
            WHERE Transactions.transaction_id = '{id}' """

        new_qry2 = qry2.format(id = self.transaction_id)
        curr.execute(qry2)
        balance = c.fetchone()[0]
        new_balance = balance + self.ammount
        qry3 ="""UPDATE Accounts
          SET balance = '{new_bal}'
          WHERE account_id = '{id}' """
        new_qry3 = qry3.format(new_bal = new_balance, id = self.account.id)
        curr.execute(new_qry3)
        conn.commit()

def new_user(user):
  isay = "insert into Users (user_id, username) Values ({},{})"
  qry = isay.format(user.get_user_id(),user.get_username())
  curr.execute(qry)
  conn.commit()

def add_account(account):
  qry = """ INSERT INTO Accounts(account_id, user_id, balance)VALUES
  ('{acc_id}','{usr_id}','{bal}')
  """
  new_qry = qry.format(acc_id = account.account_id, usr_id = account.user_id, bal = account.balance )
  curr.execute(new_qry)
  conn.commit()


def add_transaction(transaction):
  qry = """ INSERT INTO Transactions(transaction_id, account_id, ammount, created_at, status) VALUES
  ('{trans_id}','{acc_id}','{amt}', '{created}','{stat}')
  """
  new_qry = qry.format(trans_id = transaction.transaction_id ,acc_id = transaction.account_id, 
          amt = transaction.ammount, created = transaction.created_at, stat = transaction.status)
  print(new_qry)
  c.execute(new_qry)

def get_user_balance(username):
  qry =   """SELECT balance from Users 
  JOIN Accounts on Users.user_id = Accounts.user_id 
  JOIN Transactions on Accounts.account_id = Transactions.account_id 
  WHERE Users.username == '{usernm}' """
  new_qry = qry.format(usernm = username)
  curr.execute(new_qry)
  bal = curr.fetchone()
  return bal[0]






curr.close()

def helper(day,month,year):
  while(True):
    try:
      new = date(year, month, day)
      break
    except:
      day = day -1
  return new

def within_month():
  today = date.today()

  if today.month == 1:
    year = today.year - 1
    month = 12
  else:
    year = today.year
    month = today.month - 1
    
  earliest = helper(today.day,month,year)
  qry =   """SELECT * from Transactions WHERE created_at between
   {early} and {tdy}"""
   
  new_qry = qry.format(early = earliest, tdy = today)
  c.execute(new_qry)
  result = c.fetchall()
  for s in result:
   print(f"transaction_id{s[0]} account_id{s[1]} ammount{s[2]} created_at {s[3]} status{s[4]}")